name: Print uname -a

on:
  pull_request:
  push:
    branches:
      - main

jobs:
  print-uname:
    runs-on: self-hosted
    strategy:
      matrix:
        runner_type: ['c3-large-arm64-mahe']

    steps:
      - name: install crane
        env:
          VERSION: v0.19.1
        run: |
          ARCH=$([ "$(uname -m)" == "aarch64" ] && echo "arm64" || echo $(uname -m))
          URL="https://github.com/google/go-containerregistry/releases/download/$VERSION/go-containerregistry_Linux_$ARCH.tar.gz"
          curl -fSL $URL | sudo tar -xz -C /usr/local/bin crane
          crane version

      - name: Install LVH cli
        working-directory: /tmp
        run: |
          crane export quay.io/lvh-images/lvh:latest --platform linux/$(dpkg --print-architecture) lvh.tar
          tar --transform='s#usr/bin/##g' -xf lvh.tar usr/bin/lvh
          rm lvh.tar
          chmod +x lvh && sudo mv lvh /usr/local/bin
          lvh version

      - name: Install dependencies
        run: |
           deps="expect cpu-checker qemu-kvm qemu-system-x86-64 qemu-system-aarch64"
           n=0
           until [ "$n" -ge 5 ]; do
             success=1
             sudo apt update && \
             sudo apt-get clean && \
             sudo apt-get -y --no-install-recommends install ${deps} && \
             break || success=0
             n=$((n+1))
             sleep 1
           done
           [ $success -eq 1 ] || exit 42

      - name: checkout
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: versions
        id: versions
        working-directory: ./versions/kind
        run: |
          echo "| Image | kernel version |" > /tmp/image-log
          echo "| --- | --- |" >> /tmp/image-log
          images_folder=/tmp/lvh-images
          sudo mkdir $images_folder; sudo chmod 777 $images_folder
          for f in $(find $(dpkg --print-architecture) -type f ); do
            df -h /

            v=$(basename $f)
            image_tag=$(cat $f)
            image="quay.io/lvh-images/kind-ci:$v-$image_tag"

            # extract the qcow2 image
            crane export $image --platform linux/$(dpkg --print-architecture) $images_folder/kind_$v.tar
            tar --transform='s#data/images/##g' -xvf $images_folder/kind_$v.tar data/images/kind_$v.qcow2.zst
            mv kind_$v.qcow2.zst $images_folder
            rm $images_folder/kind_$v.tar
            zstd -d $images_folder/kind_$v.qcow2.zst -o $images_folder/kind_$v.qcow2
            rm $images_folder/kind_$v.qcow2.zst

            if [ "$(uname -m)" = "aarch64" ]; then
              # extract the compressed kernel
              kernel_tag=$(cat ../kernel-images/$v)
              kernel="quay.io/lvh-images/kernel-images-ci:$v-$kernel_tag"
              crane export $kernel --platform linux/$(dpkg --print-architecture) $images_folder/kernel_$v.tar
              tar --transform="s#data/kernels/$v/boot/##g" --wildcards -xvf $images_folder/kernel_$v.tar data/kernels/$v/boot/vmlinuz*
              mv vmlinuz* $images_folder/vmlinuz
              rm $images_folder/kernel_$v.tar
            fi

            if [ "$(uname -m)" = "aarch64" ]; then
              expect -c "
                        set timeout 60
                        spawn lvh run --image $images_folder/kind_$v.qcow2 --kernel $images_folder/vmlinuz
                        expect -re \"Linux version .*\n\" { exit }
              " | tee /tmp/expect.log
            else
              expect -c "
                        set timeout 60
                        spawn lvh run --image $images_folder/kind_$v.qcow2
                        expect -re \"Linux version .*\n\" { exit }
              " | tee /tmp/expect.log
            fi
            linux_ver=$(cat /tmp/expect.log | sed -ne 's/^.*Linux version \([^ ]\+\).*$/\1/p')
            echo "| ${image} | ${linux_ver} |" | tee -a /tmp/image-log
            rm $images_folder/*
          done
          echo 'IMAGE_LOG<<EOF' >> $GITHUB_ENV
          cat /tmp/image-log >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV

      - name: Print uname -a
        run: |
          uname -a
